// Code generated by MockGen. DO NOT EDIT.
// Source: services/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/dhany007/golang-job-portal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, args models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, args)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, args)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserById mocks base method.
func (m *MockUserRepository) GetUserById(ctx context.Context, id string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepositoryMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepository)(nil).GetUserById), ctx, id)
}

// MockCompanyRepository is a mock of CompanyRepository interface.
type MockCompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepositoryMockRecorder
}

// MockCompanyRepositoryMockRecorder is the mock recorder for MockCompanyRepository.
type MockCompanyRepositoryMockRecorder struct {
	mock *MockCompanyRepository
}

// NewMockCompanyRepository creates a new mock instance.
func NewMockCompanyRepository(ctrl *gomock.Controller) *MockCompanyRepository {
	mock := &MockCompanyRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepository) EXPECT() *MockCompanyRepositoryMockRecorder {
	return m.recorder
}

// CheckCompanyById mocks base method.
func (m *MockCompanyRepository) CheckCompanyById(ctx context.Context, id string) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCompanyById", ctx, id)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCompanyById indicates an expected call of CheckCompanyById.
func (mr *MockCompanyRepositoryMockRecorder) CheckCompanyById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCompanyById", reflect.TypeOf((*MockCompanyRepository)(nil).CheckCompanyById), ctx, id)
}

// CreateReviewCompany mocks base method.
func (m *MockCompanyRepository) CreateReviewCompany(ctx context.Context, args models.ReviewCompany) (models.ReviewCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReviewCompany", ctx, args)
	ret0, _ := ret[0].(models.ReviewCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReviewCompany indicates an expected call of CreateReviewCompany.
func (mr *MockCompanyRepositoryMockRecorder) CreateReviewCompany(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReviewCompany", reflect.TypeOf((*MockCompanyRepository)(nil).CreateReviewCompany), ctx, args)
}

// GetCountCompanies mocks base method.
func (m *MockCompanyRepository) GetCountCompanies(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCompanies", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountCompanies indicates an expected call of GetCountCompanies.
func (mr *MockCompanyRepositoryMockRecorder) GetCountCompanies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCompanies", reflect.TypeOf((*MockCompanyRepository)(nil).GetCountCompanies), ctx)
}

// GetCountReviewCompany mocks base method.
func (m *MockCompanyRepository) GetCountReviewCompany(ctx context.Context, companyID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountReviewCompany", ctx, companyID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountReviewCompany indicates an expected call of GetCountReviewCompany.
func (mr *MockCompanyRepositoryMockRecorder) GetCountReviewCompany(ctx, companyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountReviewCompany", reflect.TypeOf((*MockCompanyRepository)(nil).GetCountReviewCompany), ctx, companyID)
}

// GetDetailCompany mocks base method.
func (m *MockCompanyRepository) GetDetailCompany(ctx context.Context, id string) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailCompany", ctx, id)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailCompany indicates an expected call of GetDetailCompany.
func (mr *MockCompanyRepositoryMockRecorder) GetDetailCompany(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailCompany", reflect.TypeOf((*MockCompanyRepository)(nil).GetDetailCompany), ctx, id)
}

// GetListBenefitcode mocks base method.
func (m *MockCompanyRepository) GetListBenefitcode(ctx context.Context) ([]models.CompanySubCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBenefitcode", ctx)
	ret0, _ := ret[0].([]models.CompanySubCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBenefitcode indicates an expected call of GetListBenefitcode.
func (mr *MockCompanyRepositoryMockRecorder) GetListBenefitcode(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBenefitcode", reflect.TypeOf((*MockCompanyRepository)(nil).GetListBenefitcode), ctx)
}

// GetListCompanies mocks base method.
func (m *MockCompanyRepository) GetListCompanies(ctx context.Context, args models.ListData) ([]models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCompanies", ctx, args)
	ret0, _ := ret[0].([]models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCompanies indicates an expected call of GetListCompanies.
func (mr *MockCompanyRepositoryMockRecorder) GetListCompanies(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCompanies", reflect.TypeOf((*MockCompanyRepository)(nil).GetListCompanies), ctx, args)
}

// GetListDresscode mocks base method.
func (m *MockCompanyRepository) GetListDresscode(ctx context.Context) ([]models.CompanySubCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDresscode", ctx)
	ret0, _ := ret[0].([]models.CompanySubCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDresscode indicates an expected call of GetListDresscode.
func (mr *MockCompanyRepositoryMockRecorder) GetListDresscode(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDresscode", reflect.TypeOf((*MockCompanyRepository)(nil).GetListDresscode), ctx)
}

// GetListSizecode mocks base method.
func (m *MockCompanyRepository) GetListSizecode(ctx context.Context) ([]models.CompanySubCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListSizecode", ctx)
	ret0, _ := ret[0].([]models.CompanySubCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListSizecode indicates an expected call of GetListSizecode.
func (mr *MockCompanyRepositoryMockRecorder) GetListSizecode(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListSizecode", reflect.TypeOf((*MockCompanyRepository)(nil).GetListSizecode), ctx)
}

// GetReviewCompany mocks base method.
func (m *MockCompanyRepository) GetReviewCompany(ctx context.Context, companyID string, args models.ListData) ([]models.ReviewCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewCompany", ctx, companyID, args)
	ret0, _ := ret[0].([]models.ReviewCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewCompany indicates an expected call of GetReviewCompany.
func (mr *MockCompanyRepositoryMockRecorder) GetReviewCompany(ctx, companyID, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewCompany", reflect.TypeOf((*MockCompanyRepository)(nil).GetReviewCompany), ctx, companyID, args)
}

// UpdateCompany mocks base method.
func (m *MockCompanyRepository) UpdateCompany(ctx context.Context, args models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyRepositoryMockRecorder) UpdateCompany(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompanyRepository)(nil).UpdateCompany), ctx, args)
}

// MockCandidateRepository is a mock of CandidateRepository interface.
type MockCandidateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCandidateRepositoryMockRecorder
}

// MockCandidateRepositoryMockRecorder is the mock recorder for MockCandidateRepository.
type MockCandidateRepositoryMockRecorder struct {
	mock *MockCandidateRepository
}

// NewMockCandidateRepository creates a new mock instance.
func NewMockCandidateRepository(ctrl *gomock.Controller) *MockCandidateRepository {
	mock := &MockCandidateRepository{ctrl: ctrl}
	mock.recorder = &MockCandidateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCandidateRepository) EXPECT() *MockCandidateRepositoryMockRecorder {
	return m.recorder
}

// AddExperience mocks base method.
func (m *MockCandidateRepository) AddExperience(ctx context.Context, args models.CandidateExperience) (models.CandidateExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExperience", ctx, args)
	ret0, _ := ret[0].(models.CandidateExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExperience indicates an expected call of AddExperience.
func (mr *MockCandidateRepositoryMockRecorder) AddExperience(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExperience", reflect.TypeOf((*MockCandidateRepository)(nil).AddExperience), ctx, args)
}

// CheckCandidateByEmail mocks base method.
func (m *MockCandidateRepository) CheckCandidateByEmail(ctx context.Context, email string) ([]models.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCandidateByEmail", ctx, email)
	ret0, _ := ret[0].([]models.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCandidateByEmail indicates an expected call of CheckCandidateByEmail.
func (mr *MockCandidateRepositoryMockRecorder) CheckCandidateByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCandidateByEmail", reflect.TypeOf((*MockCandidateRepository)(nil).CheckCandidateByEmail), ctx, email)
}

// CheckCandidateById mocks base method.
func (m *MockCandidateRepository) CheckCandidateById(ctx context.Context, id string) (models.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCandidateById", ctx, id)
	ret0, _ := ret[0].(models.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCandidateById indicates an expected call of CheckCandidateById.
func (mr *MockCandidateRepositoryMockRecorder) CheckCandidateById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCandidateById", reflect.TypeOf((*MockCandidateRepository)(nil).CheckCandidateById), ctx, id)
}

// GetDetailCandidate mocks base method.
func (m *MockCandidateRepository) GetDetailCandidate(ctx context.Context, id string) (models.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailCandidate", ctx, id)
	ret0, _ := ret[0].(models.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailCandidate indicates an expected call of GetDetailCandidate.
func (mr *MockCandidateRepositoryMockRecorder) GetDetailCandidate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailCandidate", reflect.TypeOf((*MockCandidateRepository)(nil).GetDetailCandidate), ctx, id)
}

// GetExperienceById mocks base method.
func (m *MockCandidateRepository) GetExperienceById(ctx context.Context, experienceId int) (models.CandidateExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperienceById", ctx, experienceId)
	ret0, _ := ret[0].(models.CandidateExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperienceById indicates an expected call of GetExperienceById.
func (mr *MockCandidateRepositoryMockRecorder) GetExperienceById(ctx, experienceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperienceById", reflect.TypeOf((*MockCandidateRepository)(nil).GetExperienceById), ctx, experienceId)
}

// UpdateCandidate mocks base method.
func (m *MockCandidateRepository) UpdateCandidate(ctx context.Context, args models.Candidate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidate", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCandidate indicates an expected call of UpdateCandidate.
func (mr *MockCandidateRepositoryMockRecorder) UpdateCandidate(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidate", reflect.TypeOf((*MockCandidateRepository)(nil).UpdateCandidate), ctx, args)
}

// UpdateExperience mocks base method.
func (m *MockCandidateRepository) UpdateExperience(ctx context.Context, args models.CandidateExperience) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExperience", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExperience indicates an expected call of UpdateExperience.
func (mr *MockCandidateRepositoryMockRecorder) UpdateExperience(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperience", reflect.TypeOf((*MockCandidateRepository)(nil).UpdateExperience), ctx, args)
}
